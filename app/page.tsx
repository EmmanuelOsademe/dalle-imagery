"use client";

import { useState, useEffect } from "react";
import { PostTypes } from "@/types/common.types";
import { Loader, Card, FormField } from "@/components";

const Home: React.FC = () => {
    const [loading, setLoading] = useState<boolean>(false);
    const [allPosts, setAllPosts] = useState<Array<PostTypes>>([]);
    const [searchText, setSearchText] = useState<string>("");
    const [searchResult, setSearchResult] = useState<Array<PostTypes>>([]);
    const [searchTimeout, setSearchTimeout] = useState<ReturnType<typeof setTimeout>>(

    );

    useEffect(() => {
        const fetchPosts = async () => {
            setLoading(true);

            try {
                const response = await fetch("/api/post", {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                const posts = await response.json();
                setAllPosts(posts);
            } catch (e: any) {
                alert(e.message);
            }finally{
                setLoading(false);
            }
        }

        fetchPosts();
    }, []);

    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        clearTimeout(searchTimeout);
        setSearchText(e.target.value);

        setSearchTimeout(
            setTimeout(() => {
                const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLocaleLowerCase().includes(searchText.toLowerCase()));
                setSearchResult(searchResult);
            }, 500)
        )
    }

    return (
        <section className="max-w-7xl mx-auto">
            <div>
                <h1 className="font-extrabold text-[#222328] text-[32px]">The Community Showcase</h1>
                <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
                    Browse through a collection of imaginative and visually stunning images generated by DALL-E AI
                </p>
            </div>
            <div className="mt-16">
                <FormField 
                    labelName="Search Posts"
                    type="text"
                    name="text"
                    placeholder="SearchPosts"
                    value={searchText}
                    handleChange={handleSearchChange}
                />
            </div>
            <div className="mt-10">
                {loading ? (
                    <div className="flex justify-center items-center">
                        <Loader />
                    </div>
                ) : (
                    <>
                        {searchText && (
                            <h2 className="font-medium text-[#666e75] text-xl mb-3">
                                Showing results for <span className="text-[#222328]">{searchText}</span>
                            </h2>
                        )}
                        <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-2">
                            {searchText ? (
                                <RenderCards data={searchResult} title="No results found"/>
                            ) : (
                                <RenderCards data={allPosts} title="No posts found"/>
                            )}
                        </div>
                    </>
                )}
            </div>
        </section>
    )
}

interface RenderCardsProps {
    data: Array<PostTypes>;
    title: string;
}

const RenderCards: React.FC<RenderCardsProps> = ({data, title}) => {

    if(data?.length > 0){
        return data.map((post) => (<Card key={post._id as any as string} {...post}/>))
    }

    return (
        <h2 className="mt-5 font-bold text-[#085f99] text-xl uppercase">
            {title}
        </h2>
    )
}

export default Home;